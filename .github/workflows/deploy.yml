name: Build, Push to DockerHub & Deploy to Vercel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  docker:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/farmcon
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/farmcon:latest
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Clean up old Docker images from Docker Hub
        run: |
          # Keep ONLY the 'latest' tag, delete ALL other tags
          echo "Starting Docker Hub cleanup..."
          echo "This will keep ONLY the 'latest' tag and remove all others"

          # Login to Docker Hub and get token
          echo "Authenticating with Docker Hub..."
          TOKEN=$(curl -s -X POST "https://hub.docker.com/v2/users/login/" \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"${{ secrets.DOCKERHUB_USERNAME }}\",\"password\":\"${{ secrets.DOCKERHUB_TOKEN }}\"}" \
            | jq -r '.token')

          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "ERROR: Failed to authenticate with Docker Hub"
            exit 1
          fi

          echo "Successfully authenticated"

          # Function to fetch all tags with pagination
          fetch_all_tags() {
            local page=1
            local has_more=true
            local all_tags=""

            while [ "$has_more" = true ]; do
              echo "Fetching page $page..."
              local response=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/farmcon/tags/?page_size=100&page=$page" \
                -H "Authorization: Bearer $TOKEN")

              local tags=$(echo "$response" | jq -r '.results[] | select(.name != "latest") | .name')

              if [ -n "$tags" ]; then
                all_tags="$all_tags"$'\n'"$tags"
              fi

              local next=$(echo "$response" | jq -r '.next')
              if [ "$next" = "null" ]; then
                has_more=false
              else
                page=$((page + 1))
              fi
            done

            echo "$all_tags"
          }

          # Fetch all tags except 'latest'
          echo "Fetching all tags from Docker Hub..."
          ALL_TAGS=$(fetch_all_tags)

          # Count total tags to delete
          TOTAL=$(echo "$ALL_TAGS" | grep -v '^$' | wc -l | tr -d ' ')
          echo "Found $TOTAL tags to delete (keeping only 'latest')"

          if [ "$TOTAL" -gt 0 ]; then
            echo "Deleting all tags except 'latest'..."
            DELETED=0
            FAILED=0

            echo "$ALL_TAGS" | grep -v '^$' | while read -r TAG; do
              if [ -n "$TAG" ]; then
                echo "Deleting tag: $TAG"
                HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
                  "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/farmcon/tags/$TAG/" \
                  -H "Authorization: Bearer $TOKEN")

                if [ "$HTTP_CODE" = "204" ] || [ "$HTTP_CODE" = "200" ]; then
                  echo "âœ“ Successfully deleted: $TAG"
                  DELETED=$((DELETED + 1))
                else
                  echo "âœ— Failed to delete: $TAG (HTTP $HTTP_CODE)"
                  FAILED=$((FAILED + 1))
                fi

                # Small delay to avoid rate limiting
                sleep 0.5
              fi
            done

            echo "Cleanup completed: $DELETED deleted, $FAILED failed"
          else
            echo "No tags to delete, only 'latest' exists"
          fi

          echo "Docker Hub cleanup finished!"

      - name: Clean up local Docker resources
        if: always()
        run: |
          echo "Cleaning up local Docker resources..."
          docker system prune -af --volumes || true
          echo "Docker cleanup completed"

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          npm install -g vercel
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prod --archive=tgz --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel (Preview)
        if: github.event_name == 'pull_request'
        run: |
          npm install -g vercel
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --archive=tgz --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Preview deployment is ready! Check the Vercel dashboard for the URL.'
            })
