name: Build, Push to DockerHub & Deploy to Vercel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  docker:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/farmcon
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/farmcon:buildcache
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/farmcon:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          outputs: type=docker,export-cache=true
          provenance: false
          sbom: false

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Clean up old Docker images from Docker Hub
        run: |
          # Keep only the latest 3 images and 'latest' tag, delete everything else
          echo "Fetching tags from Docker Hub..."

          TOKEN=$(curl -s -X POST "https://hub.docker.com/v2/users/login/" \
            -H "Content-Type: application/json" \
            -d '{"username":"${{ secrets.DOCKERHUB_USERNAME }}","password":"${{ secrets.DOCKERHUB_TOKEN }}"}' \
            | jq -r '.token')

          # Get all tags except 'latest', 'main', and 'buildcache'
          ALL_TAGS=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/farmcon/tags/?page_size=100" \
            -H "Authorization: Bearer $TOKEN" \
            | jq -r '.results[] | select(.name != "latest" and .name != "main" and .name != "buildcache") | .name' | sort -r)

          # Count total tags
          TOTAL=$(echo "$ALL_TAGS" | grep -c . || echo "0")
          echo "Found $TOTAL tags (excluding 'latest', 'main', and 'buildcache')"

          # Skip the first 3 (most recent) and delete the rest
          if [ $TOTAL -gt 3 ]; then
            echo "Deleting old tags (keeping only 3 most recent + latest/main/buildcache)..."
            echo "$ALL_TAGS" | tail -n +4 | while read -r TAG; do
              if [ -n "$TAG" ]; then
                echo "Deleting tag: $TAG"
                curl -X DELETE "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/farmcon/tags/$TAG/" \
                  -H "Authorization: Bearer $TOKEN"
                echo "Deleted tag: $TAG"
              fi
            done
          else
            echo "Only $TOTAL tags found, no cleanup needed"
          fi

      - name: Clean up local Docker resources
        if: always()
        run: |
          echo "Cleaning up local Docker resources..."
          docker system prune -af --volumes || true
          docker builder prune -f || true
          echo "Docker cleanup completed"

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          npm install -g vercel
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prod --archive=tgz --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel (Preview)
        if: github.event_name == 'pull_request'
        run: |
          npm install -g vercel
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --archive=tgz --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Preview deployment is ready! Check the Vercel dashboard for the URL.'
            })